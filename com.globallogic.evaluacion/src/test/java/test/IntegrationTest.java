/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.globallogic.evaluacion.controller.EvalApp;
import com.globallogic.evaluacion.model.User;
import com.globallogic.evaluacion.service.LoginService;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.time.LocalDateTime;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = EvalApp.class)
@AutoConfigureMockMvc
public class IntegrationTest {
	String userSignupOk = "{ \"name\": \"Ricardo Bouyer\", \"email\": \"rbouyer@gmail.com\", \"password\": \"a2asfGfdfdf4\", \"phones\": [ { \"number\": 93305329, \"citycode\": 9, \"contrycode\": \"56\" } ] }";
	String userSignupInvalidEmail = "{ \"name\": \"Ricardo Bouyer\", \"email\": \"rbouyer@gmailcom\", \"password\": \"a2asfGfdfdf4\", \"phones\": [ { \"number\": 93305329, \"citycode\": 9, \"contrycode\": \"56\" } ] }";
	String userSignupInvalidPassword = "{ \"name\": \"Ricardo Bouyer\", \"email\": \"rbouyer@gmail.com\", \"password\": \"abc123\", \"phones\": [ { \"number\": 93305329, \"citycode\": 9, \"contrycode\": \"56\" } ] }";
	String userSignupInvalidUserExist = "{ \"name\": \"John Smith\", \"email\": \"jsmith@gmail.com\", \"password\": \"a2asfGfdfdf4\", \"phones\": [ { \"number\": 93305329, \"citycode\": 9, \"contrycode\": \"56\" } ] }";

    @Autowired
    private MockMvc mvc;
    
    @Autowired
    private LoginService loginSvc;

    @Test
    public void helloTest() throws Exception {
        mvc.perform(get("/"))
            .andExpect(status().isOk())
            .andExpect(content().string("Hello GlobalLogic!"));
    }

    @Test
    public void signupOkTest() throws Exception {
    	RequestBuilder requestBuilder = MockMvcRequestBuilders
				.post("/sign-up")
				.accept(MediaType.APPLICATION_JSON).content(userSignupOk)
				.contentType(MediaType.APPLICATION_JSON);
    	
    	mvc.perform(requestBuilder)
        .andExpect(status().isOk());
    }

    @Test
    public void signupInvalidEmailTest() throws Exception {
    	RequestBuilder requestBuilder = MockMvcRequestBuilders
				.post("/sign-up")
				.accept(MediaType.APPLICATION_JSON).content(userSignupInvalidEmail)
				.contentType(MediaType.APPLICATION_JSON);
    	
    	mvc.perform(requestBuilder)
        .andExpect(status().isBadRequest());
    }
    

    @Test
    public void signupInvalidPasswordTest() throws Exception {
    	RequestBuilder requestBuilder = MockMvcRequestBuilders
				.post("/sign-up")
				.accept(MediaType.APPLICATION_JSON).content(userSignupInvalidPassword)
				.contentType(MediaType.APPLICATION_JSON);
    	
    	mvc.perform(requestBuilder)
        .andExpect(status().isBadRequest());
    }
    

    @Test
    public void loginOkTest() throws Exception {    	
    	//primero signup para generar token
    	User savedUser = loginSvc.saveNewUser(new User("Juan Perez", "jperez@gmail.com", "Jperez12", null, LocalDateTime.now(), true));
    	
    	//con el token se solicita data de usuario
        mvc.perform(get(String.format("/login?token=%s", savedUser.getToken())))
            .andExpect(status().isOk());
    }

    @Test
    public void loginInvalidTokenTest() throws Exception {    	    	
    	//con el token se solicita data de usuario
        mvc.perform(get(String.format("/login?token=%s", "invalid-token")))
            .andExpect(status().isBadRequest());
    }
    

    @Test
    public void signupInvalidUserExistTest() throws Exception {
    	//primero signup para registrar usuario
    	loginSvc.saveNewUser(new User("John Smith", "jsmith@gmail.com", "Abcdef12", null, LocalDateTime.now(), true));

    	//Se intenta registrar mismo usuario
    	RequestBuilder requestBuilder = MockMvcRequestBuilders
				.post("/sign-up")
				.accept(MediaType.APPLICATION_JSON).content(userSignupInvalidUserExist)
				.contentType(MediaType.APPLICATION_JSON);
    	
    	mvc.perform(requestBuilder)
        .andExpect(status().isBadRequest());
    }

}
